datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique
  password           String
  username           String
  role               Role      @default(STUDENT)
  phone              String?   @unique
  avatar             String?
  verifyCode         String?
  verifyCodeExpiry   DateTime?
  gamificationPoints Int       @default(0)
  isVerified         Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptionStatus SubscriptionStatus?
  authoredCourses    Course[]            @relation("CourseInstructor")
  enrollments        Enrollment[]
  certificates       Certificate[]
  blogs              Blog[]
  liveClasses        LiveClass[]
  UserProgress       UserProgress[]
}

model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  thumbnail   String?
  price       Float?
  isFree      Boolean    @default(false)
  status      BlogStatus @default(DRAFT)

  // Relations
  instructorId String    @db.ObjectId
  instructor   User      @relation("CourseInstructor", fields: [instructorId], references: [id])
  categoryId   String?   @db.ObjectId
  category     Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters     Chapter[]
  enrollments  Enrollment[]
  liveClasses  LiveClass[]
  certificates Certificate[]

  @@index([instructorId, categoryId])
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course[]
}

// Explicit relation model for User-Course enrollment
model Enrollment {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  status              EnrollmentStatus @default(PENDING)
  orderId             String?
  price               Float?           @default(0)
  receipt             String?
  razorpay_payment_id String?
  razorpay_order_id   String?
  razorpay_signature  String?
  payment_status      PaymentStatus?   @default(PENDING)

  // Relations
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model Chapter {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  order       Int?
  status      BlogStatus @default(DRAFT)

  // Relations
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics    Topic[]
  quiz      Quiz[]
  resources Resource[]

  @@index([courseId])
}

model Topic {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  order       Int?
  video       String?
  duration    Float?     @db.Double
  status      BlogStatus @default(DRAFT)
  isFree      Boolean    @default(false)

  // Relations
  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  muxData      MuxData?
  userProgress UserProgress[]

  @@index([chapterId])
}

model Resource {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String
  url   String?

  // Relations
  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Quiz {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  passingScore Int?       @default(0)
  timeLimit    Int?       @default(0)
  order        Int?
  status       BlogStatus @default(DRAFT)

  // Relations
  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions Question[]

  @@index([chapterId])
}

model Question {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  order  Int?
  points Int?
  status BlogStatus @default(DRAFT)

  // Relations
  answerId String? @db.ObjectId
  answer   Option? @relation("CorrectAnswer", fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quizId   String  @db.ObjectId
  quiz     Quiz    @relation(fields: [quizId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  options Option[] @relation("QuestionOptions")
}

model Option {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  order  Int?
  status BlogStatus @default(DRAFT)

  // Relations
  questionId String   @db.ObjectId
  question   Question @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  correctForQuestions Question[] @relation("CorrectAnswer")
}

model LiveClass {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId             String    @db.ObjectId
  instructorId         String    @db.ObjectId
  title                String
  description          String?
  scheduledAt          DateTime?
  duration             Int?
  meetingUrl           String?
  maxParticipants      Int?
  enrolledParticipants String[]  @db.ObjectId // References to User

  // Relations
  course     Course @relation(fields: [courseId], references: [id])
  instructor User   @relation(fields: [instructorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String     @db.ObjectId
  title         String
  content       String?
  tags          String[]
  publishedAt   DateTime?
  status        BlogStatus @default(DRAFT)
  featuredImage String

  // Relations
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  issueDate        DateTime? @default(now())
  template         String?
  verificationCode String?   @unique

  // Relations
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscriptionPlan {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  duration       Int?
  maxFreeCourses Int?
  features       String[]
  isActive       Boolean  @default(true)

  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  // Relations
  subscriptionStatuses SubscriptionStatus[]
}

model SubscriptionStatus {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  freeCourseCount Int      @default(0)

  // Relations
  userId String           @unique @db.ObjectId
  user   User             @relation(fields: [userId], references: [id])
  planId String           @db.ObjectId
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  topicId String @unique @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  isCompleted Boolean @default(false)

  topicId String @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id])
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId])
  @@index([topicId])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  DROPPED
}

enum PaymentStatus {
  PENDING
  PAID
}
