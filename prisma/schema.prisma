datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  password           String
  username           String
  phone              String?             @unique
  avatar             String?
  role               Role                @default(STUDENT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  subscriptionStatus SubscriptionStatus?
  completedCourses   String[]            @db.ObjectId // References to Course
  earnedCertificates String[]            @db.ObjectId // References to Certificate
  gamificationPoints Int                 @default(0)

  // Relations
  authoredCourses Course[]      @relation("CourseInstructor")
  enrollments     Enrollment[]
  certificates    Certificate[]
  blogs           Blog[]
  liveClasses     LiveClass[]
}

model Course {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  instructorId  String    @db.ObjectId
  price         Float
  isFreeTier    Boolean   @default(false)
  thumbnail     String
  chapters      Chapter[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  prerequisites String[]  @db.ObjectId // References to Course
  category      String
  tags          String[]

  // Relations
  instructor   User          @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  liveClasses  LiveClass[]
  certificates Certificate[]
}

// Explicit relation model for User-Course enrollment
model Enrollment {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  courseId   String           @db.ObjectId
  enrolledAt DateTime         @default(now())
  status     EnrollmentStatus @default(ACTIVE)
  progress   Float            @default(0)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String  @db.ObjectId
  title       String
  description String
  order       Int
  topics      Topic[]

  // Relations
  course Course @relation(fields: [courseId], references: [id])
}

model Topic {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  chapterId     String     @db.ObjectId
  title         String
  description   String
  order         Int
  videoUrl      String
  videoDuration Int
  resources     Resource[]
  quiz          Quiz?

  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id])
}

model Resource {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  topicId   String   @db.ObjectId
  title     String
  url       String
  documents String[]

  // Relations
  topic Topic @relation(fields: [topicId], references: [id])
}

model Quiz {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  topicId      String     @unique @db.ObjectId
  title        String
  questions    Question[]
  passingScore Float
  timeLimit    Int

  // Relations
  topic Topic @relation(fields: [topicId], references: [id])
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId        String   @db.ObjectId
  text          String
  options       String[]
  correctAnswer Int
  points        Int

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id])
}

model LiveClass {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId             String   @db.ObjectId
  instructorId         String   @db.ObjectId
  title                String
  description          String
  scheduledAt          DateTime
  duration             Int
  meetingUrl           String
  maxParticipants      Int
  enrolledParticipants String[] @db.ObjectId // References to User

  // Relations
  course     Course @relation(fields: [courseId], references: [id])
  instructor User   @relation(fields: [instructorId], references: [id])
}

model Blog {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String     @db.ObjectId
  title         String
  content       String
  tags          String[]
  publishedAt   DateTime?
  status        BlogStatus @default(DRAFT)
  featuredImage String

  // Relations
  author User @relation(fields: [authorId], references: [id])
}

model Certificate {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  courseId         String   @db.ObjectId
  issueDate        DateTime @default(now())
  template         String
  verificationCode String   @unique

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model SubscriptionPlan {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  duration       Int
  maxFreeCourses Int
  features       String[]
  isActive       Boolean  @default(true)

  // Relations
  subscriptionStatuses SubscriptionStatus[]
}

model SubscriptionStatus {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  planId          String   @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  freeCourseCount Int      @default(0)

  // Relations
  user User             @relation(fields: [userId], references: [id])
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}
