datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  // role:
  // 1 - admin
  // 2 - teacher
  // 3 - student
  role      Int       @default(3)
  avatar    String?
  phone     String?
  courses   Course[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  category     String
  price        Float        @default(0)
  thumbnail    String?
  instructorId String       @db.ObjectId
  instructor   User         @relation(fields: [instructorId], references: [id])
  lessons      Lesson[]
  enrollments  Enrollment[]
  posts        Post[]
  payments     Payment?
  certificate  Certificate?
  isActive     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
}

model Lesson {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  video_url String
  resources String //links for PDF and PPT
  courseId  String    @db.ObjectId
  course    Course    @relation(fields: [courseId], references: [id])
  quiz      Quiz[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Enrollment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  courseId        String   @db.ObjectId
  course          Course   @relation(fields: [courseId], references: [id])
  enrollment_date DateTime @default(now())
  progress        Float    @default(0)
}

model Quiz {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  lessonId  String      @db.ObjectId
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  questions Questions[]
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
}

model Questions {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId         String   @db.ObjectId
  quiz           Quiz     @relation(fields: [quizId], references: [id])
  question_text  String
  options        String[]
  correct_option String
  answer         Answer?
}

model Answer {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  questionId      String    @unique @db.ObjectId
  qustion         Questions @relation(fields: [questionId], references: [id])
  selected_option String
  isCorrect       Boolean
}

model Payment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  courseId     String   @unique @db.ObjectId
  course       Course   @relation(fields: [courseId], references: [id])
  amount       Float
  payment_date DateTime @default(now())
  status       Int // 0 for fail , 1 for success
}

model Certificate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  courseId    String   @unique @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id])
  issued_date DateTime @default(now())
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  courseId  String    @db.ObjectId
  course    Course    @relation(fields: [courseId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
